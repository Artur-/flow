---
title: Overview
order: 1
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]
= Vaadin Flow

Vaadin Flow, a part of Vaadin Platform, is a new Java framework for building modern web apps and websites.
Flow allows developers to be super productive by creating UIs with using only type safe Java on server side or
by using HTML Templates for composing the UI and binding it to a backend with Java.

At the heart of Vaadin Flow, there are powerful abtraction layers for easily building reusable UI components with high-level Java APIs,
that are easily connected to any backend.
// MAYBE REMOVE THE NEXT PARAGRAPH COMPLETELY ? It is from Joonas/Leif/Matti //
Flow provides automated bi-directional communication between the server and the browser.
Flow gives Java developers full access to all of the modern web and makes it easier to connect the UI to data via a robust Java backend,
than using traditional REST based communication.

You are reading the documentation for Flow. It is divided into the following subsections in recommended reading order :

// not sure if basic concepts and getting started should be split ? //
// The following will be the links to each the subtopic //
* Introduction
** <<introduction/introduction-overview.asciidoc#,Introduction to Flow>>
** <<introduction/tutorial-hello-world.asciidoc#,Building a Hello World Application>>
// * Getting Started // // TODO should be added ASAP //
* <<routing/router-overview.asciidoc#,Vaadin Router>>
* Vaadin Components
** <<vaadin-components/vaadin-components-overview.asciidoc#,Using Vaadin Components in Flow>>
** <<vaadin-components/tutorial-flow-grid.asciidoc#,Grid>>
* Vaadin Data Model
** <<binding-data/tutorial-flow-components-binder.asciidoc#,Building Forms with Binder>>
** <<data-provider/tutorial-flow-data-provider.asciidoc#,DataProviders>>
* Including HTML, JavaScript and CSS files
** <<including-dependencies/tutorial-include-css#,Including Style Sheets>>
** <<including-dependencies/tutorial-importing#,Importing html/javascript>>
** <<including-dependencies/tutorial-ways-of-importing#,Ways of importing the dependencies>>
* Creating Components
** <<creating-components/tutorial-component-basic#,Creating A Simple Component Using the Element API>>
** <<creating-components/tutorial-component-many-elements#,Creating a Component Based on Many Elements>>
** <<creating-components/tutorial-component-property-descriptor#,Using API Helpers for Defining Component Properties>>
** <<creating-components/tutorial-component-composite#,Creating a Component Using Existing Components>>
** <<creating-components/tutorial-component-events#,Using Events with Components>>
** <<creating-components/tutorial-component-container#,Creating a Component Which Can Contain Other Components>>
** <<creating-components/tutorial-component-with-dependencies#,Creating a Component with External Dependencies>>
* Manipulating the DOM with Element API
** <<element-api/tutorial-properties-attributes#,Element Properties and Attributes>>
** <<element-api/tutorial-event-listener#,Listening to User Events>>
** <<element-api/tutorial-user-input#,Retrieving User Input>>
** <<element-api/tutorial-dynamic-styling#,Dynamic styling>>
** <<element-api/tutorial-shadow-root#,Shadow root in server-side Element>>
* Integrating Web Components
** <<web-components/tutorial-webcomponent-basic#,Basic Integration of a Polymer Web Component>>
** <<web-components/tutorial-webcomponent-attributes-and-properties#,Using Attributes and Properties with a Polymer Web Component>>
** <<web-components/tutorial-webcomponent-events#,Using Events with a Polymer Web Component>>
** <<web-components/tutorial-webcomponents-es5#,Serving ES5 Web Components to older browsers with Polymer 2>>
* Polymer Templates
** <<polymer-templates/tutorial-template-basic#,Creating A Simple Component Using the Template API>>
** <<polymer-templates/tutorial-template-components#,Binding Components from PolymerTemplate>>
** <<polymer-templates/tutorial-template-subtemplate#,Using sub-template from PolymerTemplate>>
** <<polymer-templates/tutorial-template-components-in-slot#,Using <slot> in PolymerTemplates>>
** <<polymer-templates/tutorial-template-event-handlers#,Handling User Events in a PolymerTemplate>>
** <<polymer-templates/tutorial-template-bindings#,Binding Model Data in a PolymerTemplate>>
*** <<polymer-templates/tutorial-template-bindings#two-way-binding,Two-way data binding>>
*** <<polymer-templates/tutorial-template-list-bindings#,Using List of Items in a PolymerTemplate with template repeater>>
** <<polymer-templates/tutorial-template-model-bean#,Using Beans with a PolymerTemplate Model>>
** <<polymer-templates/tutorial-template-model-converters#,Using Model Converters with a PolymerTemplate Model>>
* Advanced Miscellaneous Topics
// Not sure if these should be listed here, but it might help discoverablity since these are really mix of things //
** <<advanced/tutorial-execute-javascript#,Executing JavaScript from Server Side>>
** <<advanced/tutorial-bootstrap#,Modifying the bootstrap page>>
** <<advanced/tutorial-dependency-filter#,Modifying how dependencies are loaded with DependencyFilters>>
** <<advanced/tutorial-service-init-listener#,Configure RequestHandlers, BootstrapListeners and DependencyFilters using VaadinServiceInitListener>>
** <<advanced/tutorial-dynamic-content#,Showing Dynamic Content>>
** <<advanced/tutorial-loading-indicator#,Customizing the Loading Indicator>>
** <<advanced/tutorial-history-api#,History API>>
