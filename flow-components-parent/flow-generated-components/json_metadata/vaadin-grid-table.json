{
  "name": "vaadin-grid-table",
  "tag": "vaadin-grid-table",
  "baseUrl": "vaadin-grid/vaadin-grid-table.html",
  "properties": [
    {
      "name": "scrollTarget",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "Specifies the element that will handle the scroll event\non the behalf of the current element. This is typically a reference to an element,\nbut there are a few more posibilities:\n\n### Elements id\n\n```html\n<div id=\"scrollable-element\" style=\"overflow: auto;\">\n <x-element scroll-target=\"scrollable-element\">\n   <!-- Content-->\n </x-element>\n</div>\n```\nIn this case, the `scrollTarget` will point to the outer div element.\n\n### Document scrolling\n\nFor document scrolling, you can use the reserved word `document`:\n\n```html\n<x-element scroll-target=\"document\">\n  <!-- Content -->\n</x-element>\n```\n\n### Elements reference\n\n```js\nappHeader.scrollTarget = document.querySelector('#scrollable-element');\n```"
    },
    {
      "name": "maxPhysicalCount",
      "type": [
        "NUMBER"
      ],
      "objectType": [],
      "description": "The max count of physical items the pool can extend to.\n         "
    },
    {
      "name": "as",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The name of the variable to add to the binding scope for the array\nelement associated with a given template instance.\n         "
    },
    {
      "name": "indexAs",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The name of the variable to add to the binding scope with the index\nfor the row.\n         "
    },
    {
      "name": "ios",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": ""
    },
    {
      "name": "fixedSections",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "",
      "readOnly": true
    },
    {
      "name": "scrolling",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": ""
    },
    {
      "name": "size",
      "type": [
        "NUMBER"
      ],
      "objectType": [],
      "description": ""
    },
    {
      "name": "columnTree",
      "type": [
        "ARRAY"
      ],
      "objectType": [],
      "description": ""
    },
    {
      "name": "bindData",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": ""
    },
    {
      "name": "rowDetailsTemplate",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": ""
    },
    {
      "name": "columnReorderingAllowed",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": ""
    },
    {
      "name": "safari",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": ""
    },
    {
      "name": "scrollbarWidth",
      "type": [
        "NUMBER"
      ],
      "objectType": [],
      "description": ""
    },
    {
      "name": "target",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": ""
    },
    {
      "name": "hasData",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": ""
    }
  ],
  "methods": [
    {
      "name": "templatize",
      "description": "Generates an anonymous `TemplateInstance` class (stored as `this.ctor`)\nfor the provided template.  This method should be called once per\ntemplate to prepare an element for stamping the template, followed\nby `stamp` to create new instances of the template.",
      "parameters": [
        {
          "name": "template",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Template to prepare"
        },
        {
          "name": "mutableData",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "When `true`, the generated class will skip\n  strict dirty-checking for objects and arrays (always consider them to\n  be \"dirty\"). Defaults to false."
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "stamp",
      "description": "Creates an instance of the template prepared by `templatize`.  The object\nreturned is an instance of the anonymous class generated by `templatize`\nwhose `root` property is a document fragment containing newly cloned\ntemplate content, and which has property accessors corresponding to\nproperties referenced in template bindings.",
      "parameters": [
        {
          "name": "model",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Object containing initial property values to\n  populate into the template bindings."
        }
      ],
      "returns": "OBJECT"
    },
    {
      "name": "modelForElement",
      "description": "Returns the template \"model\" (`TemplateInstance`) associated with\na given element, which serves as the binding scope for the template\ninstance the element is contained in.  A template model should be used\nto manipulate data associated with this template instance.",
      "parameters": [
        {
          "name": "el",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Element for which to return a template model."
        }
      ],
      "returns": "OBJECT"
    },
    {
      "name": "scroll",
      "description": "Scrolls the content to a particular place.",
      "parameters": [
        {
          "name": "left",
          "type": [
            "NUMBER"
          ],
          "objectType": [],
          "description": "The left position"
        },
        {
          "name": "top",
          "type": [
            "NUMBER"
          ],
          "objectType": [],
          "description": "The top position"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "toggleScrollListener",
      "description": "Enables or disables the scroll event listener.",
      "parameters": [
        {
          "name": "yes",
          "type": [
            "BOOLEAN"
          ],
          "objectType": [],
          "description": "True to add the event, False to remove it."
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "firstVisibleIndex",
      "description": "Gets the index of the first visible item in the viewport.",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "lastVisibleIndex",
      "description": "Gets the index of the last visible item in the viewport.",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "updateViewportBoundaries",
      "description": "Invoke this method if you dynamically update the viewport's\nsize or CSS padding.",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "scrollToIndex",
      "description": "Scroll to a specific index in the virtual list regardless\nof the physical items in the DOM tree.",
      "parameters": [
        {
          "name": "idx",
          "type": [
            "NUMBER"
          ],
          "objectType": [],
          "description": "The index of the item"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "updateSizeForItem",
      "description": " TODO: rename to updateSizeForIndex ?",
      "parameters": [
        {
          "name": "index",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "scrollToScaledIndex",
      "description": "Scroll to a specific index (also scaled indexes) in the virtual list.\n     ",
      "parameters": [
        {
          "name": "idx",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    }
  ],
  "events": [],
  "slots": [
    "header",
    "items",
    "footer",
    "",
    "footerFocusTrap"
  ],
  "behaviors": [],
  "mixins": [],
  "description": ""
}
